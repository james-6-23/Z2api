# DeepInfra2API Go 版本配置文件
# 复制此文件为 .env 并根据需要修改配置

# ================================
# 基础服务配置
# ================================

# 服务端口（默认：8001）
PORT=8001

# API 密钥配置（逗号分隔多个密钥）
# 示例：key1,key2,key3
VALID_API_KEYS=linux.do

# ================================
# 端点配置
# ================================

# DeepInfra API 端点配置
# 默认：官方单端点（推荐新手使用）
DEEPINFRA_MIRRORS=https://api.deepinfra.com/v1/openai/chat/completions

# 多端点负载均衡配置示例（高级用户）
# 取消下面的注释并注释上面的单端点配置来启用多端点
# DEEPINFRA_MIRRORS=https://api.deepinfra.com/v1/openai/chat/completions,https://api1.deepinfra.com/v1/openai/chat/completions,https://api2.deepinfra.com/v1/openai/chat/completions

# 自定义端点配置示例（包含 Cloudflare Workers）
# DEEPINFRA_MIRRORS=https://your-worker1.workers.dev/v1/openai/chat/completions,https://your-worker2.workers.dev/v1/openai/chat/completions,https://api.deepinfra.com/v1/openai/chat/completions

# ================================
# 性能配置
# ================================

# 性能模式：fast（快速）、balanced（平衡）、secure（安全）
PERFORMANCE_MODE=balanced

# 请求重试配置
MAX_RETRIES=3
RETRY_DELAY=1000
REQUEST_TIMEOUT=120000

# 随机延迟配置（避免请求冲突）
RANDOM_DELAY_MIN=100
RANDOM_DELAY_MAX=500

# 流处理配置
STREAM_BUFFER_SIZE=16384
STREAM_TIMEOUT=300000
DISABLE_CONNECTION_CHECK=false

# ================================
# 高并发配置（可选）
# ================================

# 最大并发连接数（默认：1000，高负载时可调整）
MAX_CONCURRENT_CONNECTIONS=1000

# 连接队列大小
CONNECTION_QUEUE_SIZE=500

# 单连接最大时间（毫秒）
MAX_CONNECTION_TIME=600000

# 内存使用限制（MB）
MEMORY_LIMIT_MB=2048

# 启用连接池管理
ENABLE_CONNECTION_POOLING=true

# ================================
# 分级超时配置
# ================================

# 短响应超时（30秒）- 适用于简单请求
SHORT_RESPONSE_TIMEOUT=30000

# 中等响应超时（2分钟）- 适用于一般请求
MEDIUM_RESPONSE_TIMEOUT=120000

# 长响应超时（5分钟）- 适用于复杂请求
LONG_RESPONSE_TIMEOUT=300000

# ================================
# 监控和告警配置（可选）
# ================================

# 启用性能监控
ENABLE_METRICS=true

# 内存告警阈值（百分比）
ALERT_MEMORY_THRESHOLD=80

# 连接数告警阈值（百分比）
ALERT_CONNECTION_THRESHOLD=90

# ================================
# WARP 代理配置（可选，高级功能）
# ================================

# 是否启用 WARP 代理（默认：false）
# 注意：启用 WARP 需要额外部署 WARP 容器
WARP_ENABLED=false

# WARP 代理配置（仅在 WARP_ENABLED=true 时生效）
# HTTP_PROXY=http://deepinfra-warp:1080
# HTTPS_PROXY=http://deepinfra-warp:1080

# WARP Plus 许可证密钥（可选）
# WARP_LICENSE_KEY=your-warp-plus-key

# ================================
# 端点策略配置（高级）
# ================================

# 端点选择策略：workers_first、balanced、official_first
ENDPOINT_STRATEGY=official_first

# 启用端点健康检查
ENDPOINT_HEALTH_CHECK=false

# 故障转移超时（毫秒）
ENDPOINT_FAILOVER_TIMEOUT=5000

# 端点重试延迟（毫秒）
ENDPOINT_RETRY_DELAY=2000

# ================================
# 配置说明
# ================================

# 1. 基础使用：
#    - 复制此文件为 .env
#    - 修改 VALID_API_KEYS 为您的密钥
#    - 运行：docker compose up -d

# 2. 启用多端点负载均衡：
#    - 取消注释多端点配置
#    - 注释单端点配置
#    - 重启容器：docker compose restart

# 3. 启用 WARP 代理：
#    - 设置 WARP_ENABLED=true
#    - 取消注释 HTTP_PROXY 和 HTTPS_PROXY
#    - 部署 WARP 容器（参考文档）
#    - 重启服务

# 4. 高并发优化：
#    - 根据服务器配置调整 MAX_CONCURRENT_CONNECTIONS
#    - 增加 MEMORY_LIMIT_MB
#    - 启用 ENABLE_CONNECTION_POOLING

# 5. 性能调优：
#    - 生产环境使用 PERFORMANCE_MODE=fast
#    - 调整超时配置适应您的使用场景
#    - 启用监控和告警

# ================================
# 常用配置组合
# ================================

# 新手配置（默认）：
# - 单端点
# - 平衡性能模式
# - 基础并发设置

# 高性能配置：
# - 多端点负载均衡
# - PERFORMANCE_MODE=fast
# - 高并发设置
# - 启用连接池

# 高可用配置：
# - 多端点 + WARP 代理
# - 启用健康检查
# - 智能故障转移
# - 监控告警
